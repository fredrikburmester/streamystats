services:
  # Database migration service - runs once to set up tables
  migrate:
    build:
      context: .
      dockerfile: migration.Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@vectorchord:5432/${POSTGRES_DB:-streamystats}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-streamystats}
      - PGPASSWORD=${POSTGRES_PASSWORD:-postgres}
      - NODE_ENV=development
      - TZ=${TZ:-UTC}
    volumes:
      # Mount only migrations for development - allows testing new migrations without rebuilding
      - ./packages/database/drizzle:/app/packages/database/drizzle:ro
    depends_on:
      vectorchord:
        condition: service_healthy
    restart: "no"
    networks:
      - app-network

  nextjs-app:
    build:
      context: .
      dockerfile: apps/nextjs-app/Dockerfile
      args:
        VERSION: ${VERSION:-latest}
        COMMIT_SHA: ${COMMIT_SHA:-unknown}
        BUILD_TIME: ${BUILD_TIME:-unknown}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@vectorchord:5432/${POSTGRES_DB:-streamystats}
      - JOB_SERVER_URL=http://job-server:3005
      - HOSTNAME=0.0.0.0
      - TZ=${TZ:-UTC}
    depends_on:
      vectorchord:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped

  job-server:
    build:
      context: .
      dockerfile: apps/job-server/Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@vectorchord:5432/${POSTGRES_DB:-streamystats}
      - PORT=3005
      - HOST=0.0.0.0
      - TZ=${TZ:-UTC}
    depends_on:
      vectorchord:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped

  vectorchord:
    image: tensorchord/vchord-postgres:pg17-v0.4.1
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-streamystats}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - TZ=${TZ:-UTC}
    volumes:
      - vectorchord_data:/var/lib/postgresql/data
    restart: unless-stopped

volumes:
  vectorchord_data:
    driver: local

networks:
  app-network:
